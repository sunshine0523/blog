import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,b as n,d as a,e as i,a as s}from"./app-2bc3c870.js";const l="/blog/assets/1711161474570-001640e7.png",r="/blog/assets/1711167485291-1260255e.png",u="/blog/assets/1711167493515-34132672.png",d={},k=s('<p>JVM的垃圾回收，主要针对的就是对堆内存的回收</p><h2 id="_1-堆内存结构" tabindex="-1"><a class="header-anchor" href="#_1-堆内存结构" aria-hidden="true">#</a> 1.堆内存结构</h2><p>对于JVM堆来说，主要分为以下部分：</p><ul><li>新生代，其中新生代中包括伊甸园和两个存活区</li><li>老年代</li><li>元空间（JDK8之后方法区的实现方式）</li></ul><h2 id="_2-内存分配和回收原则" tabindex="-1"><a class="header-anchor" href="#_2-内存分配和回收原则" aria-hidden="true">#</a> 2.内存分配和回收原则</h2><h3 id="_2-1-分配原则" tabindex="-1"><a class="header-anchor" href="#_2-1-分配原则" aria-hidden="true">#</a> 2.1 分配原则</h3><h4 id="新的对象优先分配到新生代的伊甸园" tabindex="-1"><a class="header-anchor" href="#新的对象优先分配到新生代的伊甸园" aria-hidden="true">#</a> 新的对象优先分配到新生代的伊甸园</h4><p>当伊甸园区不够之后，会考虑进行一次垃圾回收 <strong>(Minor GC)</strong> ，给伊甸园腾出一些空间，之前处于伊甸园区的对象会被移动到存活区，<strong>如果存活区空间不够，那么只好通过空间分配担保，把对象提前放到老年代</strong>。</p><h4 id="大内存对象会被分配到老年代" tabindex="-1"><a class="header-anchor" href="#大内存对象会被分配到老年代" aria-hidden="true">#</a> 大内存对象会被分配到老年代</h4><p>对于大内存对象，会直接分配到老年代</p><h4 id="长期存活的对象将会进入老年代" tabindex="-1"><a class="header-anchor" href="#长期存活的对象将会进入老年代" aria-hidden="true">#</a> 长期存活的对象将会进入老年代</h4><p>一个对象出生在伊甸园，年龄为0，在经历过一次垃圾回收并且活下来，则会进入存活区，年龄为1，此后，每熬过一次垃圾回收，年龄都会增加一岁，直到到达了某个年龄，这个对象会进入老年代。</p><h3 id="gc分类" tabindex="-1"><a class="header-anchor" href="#gc分类" aria-hidden="true">#</a> GC分类</h3><ul><li>Minor/Young GC，只进行新时代回收</li><li>Old GC，只进行老年代回收</li><li>Full/Major GC，对堆中的所有位置都进行回收</li><li>Mixed GC，只对新时代和部分老年代进行回收</li></ul><h3 id="空间分配担保" tabindex="-1"><a class="header-anchor" href="#空间分配担保" aria-hidden="true">#</a> 空间分配担保</h3><p><strong>空间分配担保，就是在进行Minor GC之前，JVM会进行老年代空间大小确认，只有满足了以下条件，才会进行Minor GC，否则进行Full GC</strong>：</p><ul><li>老年代剩余的连续空间大于新生代目前对象所占空间或者历次平均占用空间</li></ul><h2 id="_2-死亡对象的判断方法" tabindex="-1"><a class="header-anchor" href="#_2-死亡对象的判断方法" aria-hidden="true">#</a> 2. 死亡对象的判断方法</h2><p>有两种常见的死亡对象判断方法：引用计数器和可达性分析</p><h3 id="_2-1-引用计数器" tabindex="-1"><a class="header-anchor" href="#_2-1-引用计数器" aria-hidden="true">#</a> 2.1 引用计数器</h3><p>引用计数器的想法比较简单：</p><ul><li>如果一个对象被引用了，那么引用次数加1</li><li>如果一个对象被引用结束了，引用次数减1</li><li>如果一个对象引用次数为0，那么该对象可以被垃圾回收了</li></ul><p>但是引用计数器有个问题，就是没用办法解决循环引用，如果两个对象相互引用，即使它们和外界没用任何联系了，它们的引用次数也都不是0，也就没有办法被回收</p><h3 id="_2-2-可达性分析" tabindex="-1"><a class="header-anchor" href="#_2-2-可达性分析" aria-hidden="true">#</a> 2.2 可达性分析</h3><p>可达性分析，就是从一系列被称之为&quot;GC Roots&quot;的对象开始，去寻找被它引用的对象链。如果一个对象最终没有被GC Roots引用到，那么就代表可以进行回收了。</p><h4 id="哪些对象可以作为gc-roots" tabindex="-1"><a class="header-anchor" href="#哪些对象可以作为gc-roots" aria-hidden="true">#</a> 哪些对象可以作为GC Roots</h4><ul><li>虚拟机栈中引用的对象</li><li>本地方法栈中引用的对象</li><li>方法区中的静态变量引用的对象</li><li>方法区中常量池中的变量引用的对象</li><li><strong>所有被同步锁持有的对象</strong></li></ul><h4 id="不可达的对象一定会被垃圾回收吗" tabindex="-1"><a class="header-anchor" href="#不可达的对象一定会被垃圾回收吗" aria-hidden="true">#</a> 不可达的对象一定会被垃圾回收吗</h4><p>不一定，一个对象被垃圾回收，至少要经过两次 <s>可达性分析</s> 标记过程。第一次判断不可达后，<strong>还要进行一次筛选，判断该对象是否有必要执行finalize方法，如果一个对象已经执行过一次finalize方法或者没有覆盖finalize方法，那就不会被垃圾回收。</strong></p><p>如果一个对象被判断确实有必要执行finalize方法，那么会将它放到一个队列当中去，但是也不是非死不可，在队列中只要这个对象和任何一个引用链搭上关系，它就会被移除队列，继续活下去。</p><h3 id="_2-3-如何判断一个常量可以被回收" tabindex="-1"><a class="header-anchor" href="#_2-3-如何判断一个常量可以被回收" aria-hidden="true">#</a> 2.3 如何判断一个常量可以被回收</h3><p>当一个常量没有任何引用指向它，那么便可以进行回收</p><h3 id="_2-4-如何判断一个类可以进行回收" tabindex="-1"><a class="header-anchor" href="#_2-4-如何判断一个类可以进行回收" aria-hidden="true">#</a> 2.4 如何判断一个类可以进行回收</h3><p>注意！这里说的是类，不是上面提到的对象的回收</p><p>一个类要进行回收，需要满足三大条件：</p><ul><li>它的所有实例对象都已经被回收，堆中没有任何该类的实例</li><li>它的类加载器ClassLoader已经被回收</li><li>它的Class对象的引用都已经被回收，不会有反射可以反射到这个类</li></ul><p>满足这三大条件，这个类就可以被回收，但是不像对象那样，说回收就回收，类到这里也不会一定回收</p><h2 id="_3-引用类型总结" tabindex="-1"><a class="header-anchor" href="#_3-引用类型总结" aria-hidden="true">#</a> 3.引用类型总结</h2>',38),h={href:"https://juejin.cn/post/7131175540874018830",target:"_blank",rel:"noopener noreferrer"},m=s(`<p>Java中有四大引用：强引用、软引用、弱引用和虚引用，它们的强度依次下降</p><h3 id="_3-1-强引用" tabindex="-1"><a class="header-anchor" href="#_3-1-强引用" aria-hidden="true">#</a> 3.1 强引用</h3><p>强引用是我们最常见的引用，我们直接new出来的引用都是强引用。</p><p>强引用不会被垃圾回收，即使内存不足，宁可抛出OOM也不会进行内存回收</p><h3 id="_3-2-软引用" tabindex="-1"><a class="header-anchor" href="#_3-2-软引用" aria-hidden="true">#</a> 3.2 软引用</h3><p>软引用比强引用弱一些，它只会在内存不足的时候才会被回收。它使用SoftReference类来声明。</p><p>软引用的垃圾不足才回收的特点，可以用来做高速缓存。比如MyBatis中的SoftCache：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> softReference <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SoftReference</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>softReference <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> softReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hardLinksToAvoidGarbageCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>hardLinksToAvoidGarbageCollection<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hardLinksToAvoidGarbageCollection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfHardLinks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>hardLinksToAvoidGarbageCollection<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试引用的时候，注意不要用 <code>String s = &quot;a&quot;</code> 而是要用 <code>String s = new String(&quot;a&quot;)</code>。</p><h3 id="_3-3-弱引用" tabindex="-1"><a class="header-anchor" href="#_3-3-弱引用" aria-hidden="true">#</a> 3.3 弱引用</h3><p>弱引用比软引用还低一些，对于弱引用，进行垃圾回收的时候，无论内存够不够，只要弱引用所在区域进行垃圾回收了，就会将它回收掉。弱引用使用WeakReference进行创建。</p><h4 id="弱引用的应用" tabindex="-1"><a class="header-anchor" href="#弱引用的应用" aria-hidden="true">#</a> 弱引用的应用</h4><p>弱引用的应用包括WeakHashMap，我们在使用HashMap的时候，键是强引用的，进行垃圾回收不会把它回收掉，而WeakHashMap的键是弱引用的，遇到垃圾回收就会回收掉，适合做一些缓存表</p><p>WeakHashMap测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">d240323</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">WeakHashMap</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> KindBrave
 * <span class="token keyword">@since</span> 2024/3/23
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> weakHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        weakHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//{key=a}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weakHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//{key=b}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//{key=a}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weakHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//{}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-虚引用" tabindex="-1"><a class="header-anchor" href="#_3-4-虚引用" aria-hidden="true">#</a> 3.4 虚引用</h3><p>虚引用是最弱的一种引用，它不和生命周期相关联，随时可能被回收。它必须和ReferenceQueue来做配合，主要用于判断一个对象什么时候被回收，在回收之前会将这个虚引用放到队列中，方便做一些回收前的操作。</p><p><img src="`+l+'" alt="1711161474570"></p><h2 id="_4-垃圾收集算法" tabindex="-1"><a class="header-anchor" href="#_4-垃圾收集算法" aria-hidden="true">#</a> 4.垃圾收集算法</h2><p>垃圾收集算法整体来说有四种：标记-清除，标记-复制，标记-整理，分代收集</p><h3 id="_4-1-标记-清除" tabindex="-1"><a class="header-anchor" href="#_4-1-标记-清除" aria-hidden="true">#</a> 4.1 标记-清除</h3><p>标记-清除是最基本的垃圾收集算法，它的思想就是对没有引用的对象进行标记，然后清除</p><p>这样清除可能导致的最大问题就是内存碎片，因为被清除的内存位置都是不连续的</p><p>其次，标记和清除两个过程耗时都比较大</p><h3 id="_4-2-标记-复制" tabindex="-1"><a class="header-anchor" href="#_4-2-标记-复制" aria-hidden="true">#</a> 4.2 标记-复制</h3><p>为了解决内存碎片问题，有了标记-复制算法，标记-复制算法就是把内存分为两块区域，每次使用只使用一块，回收之前，会对没有引用的对象进行标记，回收时，会把仍然需要存活的对象复制到另一块内存区域，这一块整体清除。</p><p>标记-复制的最大问题就是可用内存减半了</p><h3 id="_4-3-标记-整理" tabindex="-1"><a class="header-anchor" href="#_4-3-标记-整理" aria-hidden="true">#</a> 4.3 标记-整理</h3><p>标记-整理不会像标记-复制那样，可用内存减半，而是把仍然需要存活的对象给整理到一块，然后把后面的内存都释放掉，这样，仍然存活的对象都是连续的，后面也会空出大量的连续空间</p><h3 id="_4-4-分代收集" tabindex="-1"><a class="header-anchor" href="#_4-4-分代收集" aria-hidden="true">#</a> 4.4 分代收集</h3><p>其实上面的三种垃圾收集策略各有各的特点，也各有各的缺点，所以根据不同代的特点来选择不同策略是比较好的。比如：</p><ul><li>新生代经常有大量对象死亡，所以选择标记-复制</li><li>老年代一般对象数量多、占用内存大，而且没有内存分配担保，所以选择标记-整理或者标记-清除</li></ul><p><strong>这也是为什么JVM堆要进行分代的原因</strong></p><h2 id="_5-垃圾收集器" tabindex="-1"><a class="header-anchor" href="#_5-垃圾收集器" aria-hidden="true">#</a> 5.垃圾收集器</h2><p>JVM中垃圾收集器数量众多。</p><ul><li>Serial</li><li>ParNew</li><li>Parallel Scavenge</li><li>CMS</li><li>G1</li><li>ZGC</li></ul><h3 id="_5-1-serial-串行" tabindex="-1"><a class="header-anchor" href="#_5-1-serial-串行" aria-hidden="true">#</a> 5.1 Serial 串行</h3><p>Serial是JVM第一个垃圾收集器，它是串行单线程的，也就是说，在垃圾回收的时候必须暂停工作线程。</p><p>Serial使用了分代收集，</p><ul><li>对于新生代，Serial使用了标记-复制</li><li>对于老年代，Serial使用了<strong>标记-整理</strong></li></ul><h3 id="_5-2-parnew" tabindex="-1"><a class="header-anchor" href="#_5-2-parnew" aria-hidden="true">#</a> 5.2 ParNew</h3><p>ParNew和Serial类似，就是Serial的多线程版本</p><p><strong>它是Server虚拟机的首选，因为除了Serial，只有ParNew可以和CMS配合。</strong></p><h3 id="_5-3-parallel-scavenge" tabindex="-1"><a class="header-anchor" href="#_5-3-parallel-scavenge" aria-hidden="true">#</a> 5.3 Parallel Scavenge</h3><p>Parallel Scavenge是一个重视CPU效率的回收器，<strong>更加关注吞吐量</strong>，它同样采用了分代回收：</p><ul><li>新生代标记-复制</li><li>老年代标记-整理</li></ul><h3 id="_5-4-cms-concurrent-mark-sweep" tabindex="-1"><a class="header-anchor" href="#_5-4-cms-concurrent-mark-sweep" aria-hidden="true">#</a> 5.4 CMS <strong>Concurrent Mark Sweep</strong></h3><p>CMS更加关注于用户的体验，也就是尽可能让回收快速进行或者和工作线程并行执行</p><p><strong>CMS没有使用分代回收，而是统一使用标记-清除</strong></p><p>它的执行过程如下：</p><ul><li>初始标记：<strong>首先暂停工作线程，标记直接和GC Roots相连接的对象，这个速度很快</strong></li><li>并发标记：<strong>工作线程恢复，同时进行可达性分析，但是因为工作线程执行过程对象的引用可能会发生变化，所以这个步骤就是记录哪些引用发生了变化</strong></li><li>重新标记：<strong>暂停工作线程，对上个步骤中发生变化的内容进行重新标记</strong></li><li>回收：<strong>工作线程恢复，同时进行垃圾回收</strong></li></ul><p>缺点：</p><ul><li>对于回收过程中产生的引用变化无法回收</li><li>标记-清除会产生大量内存碎片</li></ul><p><img src="'+r+'" alt="1711167485291"></p><h3 id="_5-5-g1" tabindex="-1"><a class="header-anchor" href="#_5-5-g1" aria-hidden="true">#</a> 5.5 G1</h3><p>G1收集器在尽可能较短时间完成回收的基础上，还注重了高吞吐量。</p><p>G1的特点</p><ul><li>并发</li><li>分代</li><li>策略，G1整体上看是标记-整理，部分上看是标记-复制</li><li>可预测的停顿</li></ul><p>G1的流程</p><ul><li><p>初始标记</p></li><li><p>并发标记</p></li><li><p>最终标记</p><p>（以上三个和CMS类似）</p></li><li><p>回收，G1的回收不像CMS一样是并发的，而是暂停工作线程的。</p></li></ul><p><img src="'+u+'" alt="1711167493515"></p><h3 id="_5-6-zgc" tabindex="-1"><a class="header-anchor" href="#_5-6-zgc" aria-hidden="true">#</a> 5.6 ZGC</h3><p>比较新</p><p>暂停时间在几毫秒内，并且不受堆大小影响，但是会牺牲一些吞吐量</p>',64);function v(g,b){const e=p("ExternalLinkIcon");return o(),c("div",null,[k,n("p",null,[a("总结于"),n("a",h,[a("文章1"),i(e)])]),m])}const w=t(d,[["render",v],["__file","jvm_garbage_collection.html.vue"]]);export{w as default};
