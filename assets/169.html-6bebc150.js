import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as o,a as e}from"./app-2bc3c870.js";const s={},r=e(`<p>这是一道数组题，不过我愿意分类为哈希表题。</p><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>nums = [3,2,3]
<strong>输出：</strong>3</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>nums = [2,2,1,1,1,2,2]
<strong>输出：</strong>2
</pre><p><strong>提示：</strong>* <code>n == nums.length</code></p><ul><li><code>1 &lt;= n &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li></ul><p><strong>进阶：</strong> 尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答" aria-hidden="true">#</a> 解答</h2><p>这道题想要做出来并不复杂，只需对其排序，然后取length/2位置即可，但是如果尝试使用O(n)时间复杂度，O(1)空间复杂度来解答，则需要考虑到哈希表。</p><p>哈希表操作并不难，只需要考虑到即可。</p>`,13),p=[r];function c(l,g){return n(),o("div",null,p)}const u=t(s,[["render",c],["__file","169.html.vue"]]);export{u as default};
