import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,a as s}from"./app-2bc3c870.js";const n={},r=s('<p>Unsafe类顾名思义，它是一个不安全的类，它提供了一些Java中看似没有的特性，比如直接访问内存等等。</p><p>一个比较常用的用途就是其中的CAS操作，在Java并发中经常使用</p><h2 id="_1-cas" tabindex="-1"><a class="header-anchor" href="#_1-cas" aria-hidden="true">#</a> 1. CAS</h2><p>CAS就是比较然后赋值，它一般接收四个参数：</p><ul><li>对象</li><li>偏移量</li><li>期待的旧值</li><li>新值</li></ul><p>只有当前的值是期待的旧值时，才会把它赋值为新值。</p><p>为什么Unsafe的CAS可以保证正确呢？因为这里的CAS使用的是一条CPU命令，可以保证原子性</p><h2 id="_2-元反射" tabindex="-1"><a class="header-anchor" href="#_2-元反射" aria-hidden="true">#</a> 2. 元反射</h2><p>这个用途在Android中使用了。我们知道，为了保证Android系统的稳定性，有一些方法是只供系统代码调用的，它们会被标记为@hide。这个方法在新版本的Android系统中，是无法通过反射来获取的。但是Unsafe类可以直接获得偏移量，那么可以通过获得Class类中参数的偏移量来反射这个类中的methods和fields变量等信息，来反射这个类，这个就叫元反射。</p>',9),d=[r];function t(o,c){return a(),i("div",null,d)}const h=e(n,[["render",t],["__file","unsafe.html.vue"]]);export{h as default};
