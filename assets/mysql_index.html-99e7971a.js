import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,a as e}from"./app-2bc3c870.js";const p={},o=e(`<h2 id="_1-索引的介绍" tabindex="-1"><a class="header-anchor" href="#_1-索引的介绍" aria-hidden="true">#</a> 1.索引的介绍</h2><p>索引就是为了快速查找内容设立的，可以参考新华字典里的目录，如果说直接去后面翻来找字的话，那么时间会非常长，但是如果通过前面的目录进行拼音查找或者部首查找，那么效率就非常高了，实际上这里的拼音和部首，就是两种索引。</p><h2 id="_2-索引的优缺点" tabindex="-1"><a class="header-anchor" href="#_2-索引的优缺点" aria-hidden="true">#</a> 2.索引的优缺点</h2><p>优点：</p><ul><li>可以让查找效率变得很高</li><li>通过建立唯一索引，可以让行唯一</li></ul><p>缺点：</p><ul><li>建立和修改索引，都需要大量的时间。因为每次对数据内容进行更变，都需要更变索引的内容</li><li>索引是一个文件，需要存放到磁盘中，所以会占用一定的空间</li></ul><h2 id="_3-索引的底层数据结构" tabindex="-1"><a class="header-anchor" href="#_3-索引的底层数据结构" aria-hidden="true">#</a> 3.索引的底层数据结构</h2><h3 id="_3-1-hash" tabindex="-1"><a class="header-anchor" href="#_3-1-hash" aria-hidden="true">#</a> 3.1 hash</h3><p>哈希表是一种键值对存储，我们可以把索引放到key中。对于散列函数比较优秀的哈希表来说，基本上不会产生冲突，如果产生了冲突，那就通过链表的方式来解决。正常来说，哈希表可以实现O(1)时间的查找。</p><p>缺点：</p><ul><li>哈希表单查找确实很快，但是进行范围查找，比如a&gt;100 and a&lt;200，那就不太合适了，对于哈希表结构来说，每个值都需要进行一次查找</li></ul><h3 id="_3-2-二叉查找树" tabindex="-1"><a class="header-anchor" href="#_3-2-二叉查找树" aria-hidden="true">#</a> 3.2 二叉查找树</h3><p>二叉查找树是一个二叉树，但是它节点有一些特点：每个节点的左孩子都比自己小，每个节点的右孩子都比自己大</p><p>这样的话，如果查找一个值，平均只需要O(logn)的时间就可以完成，但是二叉查找树可能会退化到一条链，这是进行查找和普通链表没什么区别了，会退化成O(n)时间</p><h3 id="_3-3-平衡二叉树" tabindex="-1"><a class="header-anchor" href="#_3-3-平衡二叉树" aria-hidden="true">#</a> 3.3 平衡二叉树</h3><p>为了解决上面二叉查找树会退化为一条链的情况，平衡二叉树做了一些工作。</p><p>平衡二叉树规定，对于每个节点来说，左孩子和右孩子的高度之差不能大于1，如果大于1了，就要进行多次左旋或者右旋，直到高度之差满足条件。</p><p>缺点：</p><p>平衡二叉树很好地解决了查找退化的问题，但是因为每次插入或者删除，都可能会进行多次的左旋或者右旋，这样消耗的时间比较大</p><h3 id="_3-4-红黑树" tabindex="-1"><a class="header-anchor" href="#_3-4-红黑树" aria-hidden="true">#</a> 3.4 红黑树</h3><p>接下来就是红黑树，上面说的平衡二叉树每次都可能进行多次的左旋或者右旋，而红黑树每次都只进行一次左旋或者右旋。</p><p>一个红黑树有以下5个特点：</p><ul><li>每个节点不是红色就是黑色的</li><li>根节点一定是黑色的</li><li>叶子节点是<strong>黑色</strong>的空节点</li><li>一个节点是红色的话，那么它的孩子节点一定是黑色的，反过来不一定（不能连着两个红）</li><li>从根节点到叶子节点，每条路径上的黑色节点数量一定是相同的</li></ul><p>红黑树因为每次的左旋或者右旋都只进行一次，所以插入和删除的效率比平衡二叉树来说是有所提升的</p><p>但是红黑树并不是完全保证平衡的，也就是对于一个节点来说，它的左孩子和右孩子的高度可能差值会大一些，这样查找效率可能会有所下降，树高可能会高一些，IO操作就会多一些，这也是MySQL没有选择红黑树的原因（B+树是矮胖的）</p><h4 id="红黑树是如何保证平衡的" tabindex="-1"><a class="header-anchor" href="#红黑树是如何保证平衡的" aria-hidden="true">#</a> 红黑树是如何保证平衡的？</h4><p>旋转和染色。</p><h3 id="_3-5-b树-b-树" tabindex="-1"><a class="header-anchor" href="#_3-5-b树-b-树" aria-hidden="true">#</a> 3.5 B树/B+树</h3><p>B树叫做多路平衡查找树，B+树是B树的一个改进</p><p>B树和B+树的区别如下：</p><ul><li>B树所有位置都可以存放key和data，B+树只有叶子节点存放key和data，其他位置只存放key</li><li>B树中一个关键字只能出现一次，B+树中可能出现多次</li><li>B树的叶子节点是相互独立的，B+树的叶子节点之间是通过一个链连在一起的</li><li><s>B树进行查找只需要查到key就可以了，因为节点中既有key又有value；而B+树必须要查到叶子节点</s></li><li>对于范围查找来说，B树需要查找到左范围，然后通过中序遍历，直到找到右范围；而B+树通过叶子节点的链表即可</li></ul><p>这样来说，B+树有很多优势：</p><ul><li>查找更稳定，每个都需要到达叶子节点</li><li>范围查找更快捷</li></ul><p>所以，MySQL的InnoDB和MyISAM(Maiˈzæm)都使用了B+树。</p><p>有关B+树的一些补充</p><p>B+树是有阶的概念的，对于一个m阶的B+树，那么它的孩子数量最多就是m个。</p><p>对于B+树的一个节点来说，它内部存放的可能是这样：20 30 40...，小于20的会走一个孩子，20-30的会走一个孩子，依次。</p><p>对于查询时间复杂度的话，基本上就是logn的。</p><h2 id="_4-主键索引和二级索引" tabindex="-1"><a class="header-anchor" href="#_4-主键索引和二级索引" aria-hidden="true">#</a> 4.主键索引和二级索引</h2><p>主键索引就是为主键建立的索引，对于InnoDB来说，主键索引中的key是主键，data就是这一行的内容了，对于MyISAM来说，主键索引中的data也是指向数据的一个值</p><p>对于InnoDB来说，如果没有指定主键所以，它会去寻找唯一非空索引，如果有，那么就把它当作主键索引，否则就创建一个6bit的主键索引</p><p>对于二级索引来说，其data的值不是数据，而是主键的值，这样通过二级索引来检索数据，实际上是需要回表的，再根据主键索引查找到数据</p><p>在InnoDB中，除了主键索引都是二级索引，包括</p><ul><li>普通索引</li><li>唯一索引</li></ul><h2 id="_5-聚簇索引和非聚簇索引" tabindex="-1"><a class="header-anchor" href="#_5-聚簇索引和非聚簇索引" aria-hidden="true">#</a> 5.聚簇索引和非聚簇索引</h2><h3 id="_5-1-聚簇索引" tabindex="-1"><a class="header-anchor" href="#_5-1-聚簇索引" aria-hidden="true">#</a> 5.1 聚簇索引</h3><p>所谓聚簇索引，就是指的索引和数据是在一起的，比如InnoDB中的主键索引。而MyISAM主键索引也是非聚簇索引，主键索引中的data也不是这一行的数据，而是指向了数据的位置</p><p>下面记一下，忘记了</p><p>优点：</p><ul><li>对于排序查找和范围查找很方便</li><li><s>聚簇查找不需要进行回表查找，因为data中就是这一行的信息了</s>。查找非常快，因为聚簇查找不需要进行回表操作，这样会减少一次IO操作</li></ul><p>缺点：</p><ul><li>依赖于有序数据，如果数据是有序的，那么建立和搜索索引都会非常顺序，如果是无序的，比如UUID什么的，那么索引之间的比较就会很耗时</li><li>更新代价大。因为聚簇索引数据是放到data中的，这样的话更新索引也需要处理这些数据，耗时较大</li></ul><h3 id="_5-2-非聚簇索引" tabindex="-1"><a class="header-anchor" href="#_5-2-非聚簇索引" aria-hidden="true">#</a> 5.2 非聚簇索引</h3><p>非聚簇索引就是索引中的data存放的不是真正的数据，而是数据的指针或者主键的值。</p><p>优点：</p><ul><li>更新消耗小，因为非聚簇索引中没有真正的值</li></ul><p>缺点：</p><ul><li>依赖有序数据，同上</li><li>查找需要进行回表操作，数据查询比较慢</li></ul><h3 id="非聚簇索引一定会回表查询吗" tabindex="-1"><a class="header-anchor" href="#非聚簇索引一定会回表查询吗" aria-hidden="true">#</a> 非聚簇索引一定会回表查询吗？</h3><p>不一定，如果查的列恰好是有索引的，那对于InnoDB来说，就不需要进行回表了。</p><p>对于MyISAM来说，如果查的列是主键，那么其实也不需要进行回表。</p><p>这种情况就是覆盖索引了。</p><h2 id="_6-覆盖索引和联合索引" tabindex="-1"><a class="header-anchor" href="#_6-覆盖索引和联合索引" aria-hidden="true">#</a> 6.覆盖索引和联合索引</h2><p>所谓覆盖索引，就是准备查找的列恰好都是有索引的列，这样查找的时候就不需要进行回表操作。</p><p>所谓联合索引，就是把多列合在一起共同作为一个索引。</p><h3 id="_6-1-最左前缀匹配原则" tabindex="-1"><a class="header-anchor" href="#_6-1-最左前缀匹配原则" aria-hidden="true">#</a> 6.1 最左前缀匹配原则</h3><p>忘了，看看</p><p>最左前缀匹配原则，就是在使用联合索引时，根据联合索引中从左到右的顺序，先过滤掉一些不符合的数据再进行下面的匹配，这样效率会高一些。所以在进行联合索引设计时，应该把一些过滤效果好的列放到左边。</p><p>过滤什么时候会停止？&gt; &lt;都会，&gt;= &lt;= between like不会</p><p>所以对于联合索引 (a, b)来说，如果查询：</p><p>select a, b where a=1 and b=2是可以走索引的，但是查询：</p><p>select b 就是不走索引的，</p><p>select a, b, c where a = 1 and b &gt; 2 and c=1，那么c就是走不了索引的</p><h2 id="_7-索引下推" tabindex="-1"><a class="header-anchor" href="#_7-索引下推" aria-hidden="true">#</a> 7.索引下推</h2><h2 id="_8-正确使用索引的建议-感觉比较重要" tabindex="-1"><a class="header-anchor" href="#_8-正确使用索引的建议-感觉比较重要" aria-hidden="true">#</a> 8.正确使用索引的建议，感觉比较重要</h2><h3 id="_8-1-选择合适的列作为索引" tabindex="-1"><a class="header-anchor" href="#_8-1-选择合适的列作为索引" aria-hidden="true">#</a> 8.1 选择合适的列作为索引</h3><ul><li>不应该把可空的列作为索引，因为索引很难优化NULL值</li><li>频繁查找的列作为索引</li><li>频繁作为条件查询的列作为索引</li><li>频繁作为连接字段的列作为索引</li><li>频繁更新的列不要作为索引，因为更新也需要更新索引，所以比较耗时</li></ul><p>什么情况可以加索引</p><ul><li>有唯一性的字段</li><li>order by/group by这种可以加索引，因为索引已经拍好了</li><li>经常被where/select使用的</li></ul><p>什么情况下不应该加索引</p><ul><li>表中数据较少</li><li>经常被更新的列</li><li>where/order by/group by用不上的字段</li><li>重复值较多的列</li></ul><h3 id="_8-2-每张表上的索引不宜过多" tabindex="-1"><a class="header-anchor" href="#_8-2-每张表上的索引不宜过多" aria-hidden="true">#</a> 8.2 每张表上的索引不宜过多</h3><p>每张表上的索引最多不要大于5个，索引虽然能够加快查找，但是也需要消耗时间来维护，并且也需要占用一定的存储空间，如果索引过多，那么可能会适得其反</p><h3 id="_8-3-删除不常用的索引" tabindex="-1"><a class="header-anchor" href="#_8-3-删除不常用的索引" aria-hidden="true">#</a> 8.3 删除不常用的索引</h3><h3 id="_8-4-尽可能地使用联合索引" tabindex="-1"><a class="header-anchor" href="#_8-4-尽可能地使用联合索引" aria-hidden="true">#</a> 8.4 尽可能地使用联合索引</h3><p>我们应该尽可能地使用联合索引而不是单列索引，因为索引也是要存储的，我们可以把索引联合起来，这样只需要存一个B+树</p><h3 id="_8-5-对于字符串索引-要使用前缀索引" tabindex="-1"><a class="header-anchor" href="#_8-5-对于字符串索引-要使用前缀索引" aria-hidden="true">#</a> 8.5 对于字符串索引，要使用前缀索引</h3><p>因为前缀索引占用空间更小，查询速度更快</p><h3 id="_8-6-要避免索引失效" tabindex="-1"><a class="header-anchor" href="#_8-6-要避免索引失效" aria-hidden="true">#</a> 8.6 要避免索引失效</h3><p>这个另说，见另一篇</p><h3 id="_8-7-要避免索引重复" tabindex="-1"><a class="header-anchor" href="#_8-7-要避免索引重复" aria-hidden="true">#</a> 8.7 要避免索引重复</h3><p>如果已经建立了联合索引，那么单列索引就不需要了，需要删除</p><p>有关索引的使用，可以见下面：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">index</span> ai <span class="token keyword">on</span> t <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">index</span> bi <span class="token keyword">on</span> t <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;def&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---+------+------+------+</span>
<span class="token operator">|</span> k <span class="token operator">|</span> a    <span class="token operator">|</span> b    <span class="token operator">|</span> c    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---+------+------+------+</span>
<span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span> ab   <span class="token operator">|</span> cd   <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span> abc  <span class="token operator">|</span> def  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---+------+------+------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> a <span class="token keyword">from</span> t<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> ai   <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> a <span class="token keyword">from</span> t <span class="token keyword">where</span> b <span class="token operator">like</span> <span class="token string">&#39;a%&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                 <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> bi            <span class="token operator">|</span> bi   <span class="token operator">|</span> <span class="token number">403</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到type从ALL到index到range</p>`,96),t=[o];function r(l,c){return a(),n("div",null,t)}const d=s(p,[["render",r],["__file","mysql_index.html.vue"]]);export{d as default};
