import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,a as l}from"./app-2bc3c870.js";const t={},r=l('<h2 id="_1-线程常见的调度方法" tabindex="-1"><a class="header-anchor" href="#_1-线程常见的调度方法" aria-hidden="true">#</a> 1.线程常见的调度方法</h2><ul><li>等待：wait</li><li>让出：yield</li><li>中断：interrupt</li><li>通知：notify notifyAll</li><li>休眠：sleep</li></ul><h2 id="_2-为什么要使用interrupt而不是stop" tabindex="-1"><a class="header-anchor" href="#_2-为什么要使用interrupt而不是stop" aria-hidden="true">#</a> 2.为什么要使用interrupt而不是stop</h2><h2 id="_3-sleep和wait的区别" tabindex="-1"><a class="header-anchor" href="#_3-sleep和wait的区别" aria-hidden="true">#</a> 3.sleep和wait的区别</h2><ul><li>sleep是Thread的方法，wait是Object的方法</li><li>sleep暂停线程时，不会让出共享资源；wait会</li><li>sleep在任何时候都可以调用，wait只有在获得了锁之后才可以调用</li><li>sleep在休眠时间到了之后会自动恢复，wait可以设置在等待时间结束后自动恢复，也可以通过其他线程对锁的notify来恢复</li></ul><h2 id="_4-线程的状态有几种" tabindex="-1"><a class="header-anchor" href="#_4-线程的状态有几种" aria-hidden="true">#</a> 4.线程的状态有几种</h2><ul><li>创建：线程刚刚创建，还没有执行</li><li>执行：线程正常工作</li><li>阻塞：线程被锁阻塞着</li><li>等待：线程调用了wait方法，需要等待其他线程调用notify或者interrupt</li><li>超时等待：过了超时时间自动恢复</li><li>中止：线程执行完毕</li></ul><h2 id="_5-线程通信" tabindex="-1"><a class="header-anchor" href="#_5-线程通信" aria-hidden="true">#</a> 5.线程通信</h2>',8),h=[r];function n(d,s){return e(),a("div",null,h)}const _=i(t,[["render",n],["__file","thread.html.vue"]]);export{_ as default};
