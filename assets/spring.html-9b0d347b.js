import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,a as e}from"./app-2bc3c870.js";const l={},n=e('<p>Spring是一个开源的、轻量的Java开发框架，意在提高Java开发人员的开发效率。Spring的两大特点就是控制反转和面向切片</p><p>Spring的模块包括Core、Data Access、Web、Test、AOP等等。</p><h2 id="_1-spring-springmvc-springboot的区别" tabindex="-1"><a class="header-anchor" href="#_1-spring-springmvc-springboot的区别" aria-hidden="true">#</a> 1.Spring/SpringMVC/SpringBoot的区别</h2><h2 id="_2-ioc-di-ioc实现机制" tabindex="-1"><a class="header-anchor" href="#_2-ioc-di-ioc实现机制" aria-hidden="true">#</a> 2.IoC/DI/IoC实现机制？</h2><h2 id="_3-aop" tabindex="-1"><a class="header-anchor" href="#_3-aop" aria-hidden="true">#</a> 3.AOP</h2><p>Spring中AOP是一个重要的概念。我们知道，传统的开发方式包括面向过程编程和面向对象编程。比如，我们想要实现一个动物类，让它有吃和跑的能力，这是一个纵向的过程。但是，如果说我们想要给每个方法加上一些日志功能等等，传统的纵向编程显得比较复杂，需要在每个方法中都去写相同的日志功能。所以，这种功能更加适合横向开发，也就是更加适合用AOP操作。</p><p>Spring中的AOP是通过动态代理的方式实现的。有关AOP的一些概念如下：</p><ul><li>切面：如果说类是对事物功能的抽象，那么切面就是对不同事物中相同功能的抽象，比如说日志</li><li>连接点：作为拦截的条件，在Spring中一般来说是一个方法</li><li>切点：对连接点进行定位</li><li>通知：拦截成功后的操作</li><li>织入：将操作添加到连接点的过程，可以分为三种： <ul><li>编译时织入</li><li>类加载时织入</li><li>运行时织入</li></ul></li></ul><h3 id="_3-1-aop的环绕方式" tabindex="-1"><a class="header-anchor" href="#_3-1-aop的环绕方式" aria-hidden="true">#</a> 3.1 AOP的环绕方式</h3><ul><li>前置通知</li><li>后置通知</li><li>返回通知</li><li>异常通知</li><li>环绕通知：运行前后都执行</li></ul><h2 id="_3-2-两种动态代理" tabindex="-1"><a class="header-anchor" href="#_3-2-两种动态代理" aria-hidden="true">#</a> 3.2 两种动态代理</h2><h2 id="_4-spring用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#_4-spring用到了哪些设计模式" aria-hidden="true">#</a> 4.Spring用到了哪些设计模式</h2><ul><li>工厂模式</li><li>单例模式</li><li>代理模式</li><li>适配器模式</li><li>观察者模式</li><li>模板模式</li></ul>',13),h=[n];function o(d,s){return a(),r("div",null,h)}const p=i(l,[["render",o],["__file","spring.html.vue"]]);export{p as default};
